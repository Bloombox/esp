#!/bin/bash
#
# Copyright (C) Endpoints Server Proxy Authors
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
################################################################################
#

# This script runs a long-running test against it.

ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
. ${ROOT}/script/all-utilities \
  || { echo "Cannot load Bash utilities" ; exit 1 ; }

API_KEY=''
SERVICE_NAME='testing-dot-endpoints-jenkins.appspot.com'
HOST=''
DURATION_IN_HOUR=0

while getopts :a:h:l:s: arg; do
  case ${arg} in
    a) API_KEY="${OPTARG}";;
    h) HOST="${OPTARG}";;
    l) DURATION_IN_HOUR="${OPTARG}";;
    s) SERVICE_NAME="${OPTARG}";;
    *) echo "Invalid option: -${OPTARG}";;
  esac
done

[[ -n "${HOST}" ]] || error_exit 'Please specify a host with -h option.'

if ! [[ -n "${API_KEY}" ]]; then
  set_api_keys;
  API_KEY="${ENDPOINTS_JENKINS_API_KEY}"
fi

POST_FILE="${ROOT}/test/data/35k.json"

pushd ${ROOT}/test/client > /dev/null

END_TIME=$(date +"%s")
END_TIME=$((END_TIME + DURATION_IN_HOUR * 60 * 60))
RUN_COUNT=0
STRESS_FAILURES=0
BOOKSTORE_FAILURES=0

START_MEMORY_USAGE=0
SECOND_MEMORY_USAGE=0
INCREASED_MEMORY_USAGE=0

#Status server always run in port 8090 and use HTTP protocol.
STATUS_SERVER=${HOST/8080/8090}
STATUS_SERVER=${STATUS_SERVER/443/8090}
STATUS_SERVER=${STATUS_SERVER/https/http}
local_json="$(mktemp /tmp/XXXXXX.json)"

while true; do
  ((RUN_COUNT++))

  #######################
  # Insert tests here
  #######################

  echo "Starting test run ${RUN_COUNT} at $(date)."
  echo "Failures so far: Stress: ${STRESS_FAILURES}, Bookstore: ${BOOKSTORE_FAILURES}."

  # Record the memory usage for each test run
  curr_usage=$(get_memory_usage "${STATUS_SERVER}" "${local_json}") \
    || error_exit "Could not extract memory usage from ${STATUS_SERVER}"
  if [[ ${RUN_COUNT} -eq 1 ]]; then
    START_MEMORY_USAGE=${curr_usage}
    echo "Start Memory Usage (Bytes): ${START_MEMORY_USAGE}."
  else
    INCREASED_MEMORY_USAGE=$((${curr_usage} - ${START_MEMORY_USAGE}))
    echo "Memory Increased in Test ${RUN_COUNT} (Bytes): ${INCREASED_MEMORY_USAGE}"
    if [[ ${RUN_COUNT} -eq 2 ]]; then
      SECOND_MEMORY_USAGE=${curr_usage}
      echo "Second Memory Usage (Bytes): ${SECOND_MEMORY_USAGE}."
    fi
  fi
  python -m json.tool "${local_json}"

  # Generating token for each run, that they expire in 1 hour.
  JWT_TOKEN=`${ROOT}/client/custom/gen-auth-token.sh -a ${SERVICE_NAME}`
  echo "Auth token is: ${JWT_TOKEN}"

  echo "Starting bookstore test at $(date)."
  ./esp_bookstore_test.py --verbose=true \
      --host=${HOST} \
      --api_key=${API_KEY} \
      --auth_token=${JWT_TOKEN} \
      --allow_unverified_cert=true \
    || ((BOOKSTORE_FAILURES++))

  echo "Getting endpoints status at $(date)."


  echo "Starting stress test at $(date)."
  ./esp_client.py \
    --test=stress \
    --host=${HOST} \
    --api_key=${API_KEY} \
    --auth_token=${JWT_TOKEN} \
    --post_file=${POST_FILE} \
    || ((STRESS_FAILURES++))

  #######################
  # End of test suite
  #######################

  # Break if test has run long enough.
  [[ $(date +"%s") -lt ${END_TIME} ]] || break
done

echo "Finished ${RUN_COUNT} test runs."
echo "Failures: Stress: ${STRESS_FAILURES}, Bookstore: ${BOOKSTORE_FAILURES}."
echo "Total Memory Increased (Bytes): ${INCREASED_MEMORY_USAGE}."
rm "${local_json}"

RESULT=0
# We fail the test if all bookstore runs failed.
[[ ${BOOKSTORE_FAILURES} == ${RUN_COUNT} ]] \
  && RESULT=1

# We fail the test if memory increase is large.
detect_memory_leak "${START_MEMORY_USAGE}" "${SECOND_MEMORY_USAGE}" "${INCREASED_MEMORY_USAGE}"
HAS_MEMORY_LEAK=$?
echo "memory leak detect: ${HAS_MEMORY_LEAK}"

exit $((${RESULT} + ${HAS_MEMORY_LEAK}))
