#!/bin/bash
#
# Copyright (C) Endpoints Server Proxy Authors
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
################################################################################
#

[[ "$(uname)" == "Linux" ]] || { echo "Run on Linux only."; exit 1; }

ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
. ${ROOT}/script/all-utilities || { echo "Cannot load Bash utilities"; exit 1; }

TEST_ENV=""
# This variable can be set by -m option. If set to a positive value, the nginx
# and the backend will be kept alive for that much time for manual test. And
# this script will skip running the loadtest client esp_client.py.
MANUAL_TEST_DURATION_MINUTES=0

while getopts m:t: arg; do
  case ${arg} in
    m) MANUAL_TEST_DURATION_MINUTES="${OPTARG}";;
    t) TEST_ENV="--test_env=$(realpath "${OPTARG}")";;
  esac
done

echo "Installing Node.js and npm."
wget https://storage.googleapis.com/apache_tarballs/node-v4.2.1-linux-x64.tar.gz \
  || error_exit "Failed to download Node.js package."
sudo tar -C /usr/local --strip-components 1 -xzf node-v4.2.1-linux-x64.tar.gz \
  || error_exit "Failed to install Node.js."

echo "Starting backend."
pushd test/echo
npm install
node echo.js 2>&1 > /dev/null&
trap 'kill %node' EXIT
popd

NGINX=${ROOT}/nginx-esp

gsutil cp gs://client-secret-files/esp-load-test-08fcbb64ace1.json \
    ${ROOT}/test/echo/gce-vm/client-secret.json \
  || error_exit "Failed to download credentials."

set_api_keys
API_KEY="${ESP_LOAD_TEST_API_KEY}"
[[ -n "${API_KEY}" ]] || error_exit 'Could not set api key.'
NGINX_CONFIG=${ROOT}/test/echo/gce-vm/nginx.conf
PREFIX=${ROOT}/.nginx
# clean up the error log before the run
rm ${PREFIX}/logs/error.log

(
  echo "Building Endpoints Runtime."
  cd ${ROOT} \
    && bazel build --config=release //src/nginx/main:nginx-esp \
    && cp -f "${ROOT}/bazel-bin/src/nginx/main/nginx-esp" "${NGINX}" \
    || error_exit "Failed to build //src/nginx/main:nginx-esp"
) \
  || error_exit "Build failed, aborting."

echo "Starting Endpoints Runtime."
mkdir --parents --mode=777 "${PREFIX}/logs" \
  || error_exit "Cannot create NGINX logs directory."

NGINX_ARGS=(-p "${PREFIX}" -c "${NGINX_CONFIG}" -g "pid ${PREFIX}/.nginx.pid;")

${NGINX} "${NGINX_ARGS[@]}" -T  \
  || error_exit "Nginx configuration test failed."
${NGINX} "${NGINX_ARGS[@]}"

echo "Constructing test data."
SERVICE_NAME="echo-esp-load-test.cloudendpointsapis.com"
JWT_TOKEN=$( ${ROOT}/client/custom/gen-auth-token.sh \
    -s ${ROOT}/test/echo/esp-echo-client-secret-jwk.json \
    -a ${SERVICE_NAME} )
POST_FILE="${ROOT}/test/echo/gce-vm/service.json"
HOST="http://127.0.0.1:8090"
sed -e "s|\${API_KEY}|${API_KEY}|g" \
    -e "s|\${HOST}|${HOST}|g" \
    -e "s|\${POST_FILE}|${POST_FILE}|g" \
    -e "s|\${JWT_TOKEN}|${JWT_TOKEN}|g" \
    ${ROOT}/test/client/test_data.json.temp > ${ROOT}/test/client/test_data.json
cat ${ROOT}/test/client/test_data.json

function quit_nginx {
  ${NGINX} "${NGINX_ARGS[@]}" -s quit
}

if [[ ${MANUAL_TEST_DURATION_MINUTES} -gt 0 ]]; then
  echo "ESP listens at port 8090. You can start your manual test against it."
  echo "ESP will quit after ${DURATION_MINUTES} minutes or by Ctrl-C."
  echo "NGINX error log can be found here: ${PREFIX}/logs/error.log"
  trap quit_nginx EXIT
  sleep `expr "${MANUAL_TEST_DURATION_MINUTES}" \* 60`
else
  echo "Start basic testing"
  pushd ${ROOT}/test/client
  ./esp_client.py --test_data=${ROOT}/test/client/test_data.json ${TEST_ENV}
  EXIT_STATUS=$?
  popd
fi

echo "Shutting down Nginx."
${NGINX} "${NGINX_ARGS[@]}" -s quit

echo "========================================================================"
echo "NGINX error log: ${PREFIX}/logs/error.log"
echo "========================================================================"
cat "${PREFIX}/logs/error.log"
echo "========================================================================"

exit ${EXIT_STATUS}
