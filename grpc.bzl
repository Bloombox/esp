# Copyright (C) Endpoints Server Proxy Authors
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
################################################################################
#

# Custom Bazel rules for building ESP's GRPC dependencies.

load("/google/protobuf/protobuf", "cc_proto_library")

def _file_with_extension(src, ext):
  elements = src.rpartition('/')
  basename = elements[-1].partition('.')[0]
  return "".join(elements[:-1] + [basename, ext])

def _protoc_invocation(srcs, flags, protoc):
  """Returns a command line to invoke protoc from a genrule, on the given
  sources, using the given flags.
  """
  protoc_command = "$(location %s) -I . " % (protoc)
  srcs_params = ""
  for src in srcs:
    srcs_params += " $(location %s)" % (src)
  return protoc_command + flags + srcs_params

def cc_grpc_library(
    name,
    services,
    other_messages=[],
    deps=[],
    cc_libs=[],
    protoc="//google/protobuf:protoc",
    default_runtime="//google/protobuf:protobuf",
    **kargs):
  """Declares a cc_library for the code generated by gRPC and protoc from the
  given proto sources (services and other_messages). The generated code doesn't
  include proto services of the files passed as other_messages.
  """
  cc_proto_library(
      name = name + "_messages",
      srcs = services + other_messages,
      deps = deps,
      cc_libs = cc_libs,
      protoc = protoc,
      default_runtime = default_runtime,
      **kargs
  )

  h_files = []
  cc_files = []
  for src in services:
    h_files += [_file_with_extension(src, ".grpc.pb.h")]
    cc_files += [_file_with_extension(src, ".grpc.pb.cc")]

  protoc_flags = ("--grpc_out=$(GENDIR) --plugin=" +
      "protoc-gen-grpc=$(location //external:grpc_cpp_plugin)")

  native.genrule(
    name = name + "_codegen",
    srcs = services + [
      "//external:grpc_cpp_plugin",
      protoc,
    ],
    outs = h_files + cc_files,
    cmd = _protoc_invocation(services, protoc_flags, protoc),
  )
  native.cc_library(
    name = name,
    hdrs = h_files,
    srcs = cc_files,
    deps = [
      ":" + name + "_messages",
      "//external:grpc++",
    ],
    **kargs
  )
