#!/bin/bash
#
# Copyright (C) Endpoints Server Proxy Authors
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
################################################################################
#

# This script deploys the echo API into a GAEv2 VM with ESP
# and use AB to test performance against it.
#
# This script requires AB(apache benchmark), python gflag
# and auth_token_gen.
# script/linux-install-test-client can be used to install them.

if [[ "$(uname)" != "Linux" ]]; then
  echo "Run on Linux only."
  exit 1
fi

ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
. ${ROOT}/script/all-utilities \
  || { echo "Cannot load Bash utilities" ; exit 1 ; }

IMAGE_NAME=gcr.io/endpointsv2/endpoints-runtime-flex:debian-git-$(git log -1 --pretty=format:%H)
PROJECT_ID=esp-load-test
API_KEY=''
TEST_ENV=''
BUCKET=''

while getopts a:i:p:t:b: arg; do
  case ${arg} in
    a) API_KEY=${OPTARG};;
    i) IMAGE_NAME=${OPTARG};;
    p) PROJECT_ID=${OPTARG};;
    t) TEST_ENV="--test_env=$(realpath "${OPTARG}")";;
    b) BUCKET="${OPTARG}";;
    *) echo "Invalid option: -${OPTARG}";;
  esac
done

if [[ -z "${API_KEY}" ]]; then
  echo "Getting default API Key set."
  set_api_keys
  API_KEY="${ESP_LOAD_TEST_API_KEY}"
  [[ -n "${API_KEY}" ]] \
    || error_exit 'API key is not set properly'
fi

TIME_VERSION="$(date +"%Y%m%d%H%M%S")"
APP_VERSION="${IMAGE_NAME}-${TIME_VERSION}"
GAE_VERSION="perf-test-echo-${TIME_VERSION}"
echo "API_KEY: ${API_KEY}"
echo "PROJECT_ID: ${PROJECT_ID}"
echo "IMAGE_NAME: ${IMAGE_NAME}"
echo "APP_VERSION: ${APP_VERSION}"
echo "GAE_VERSION: ${GAE_VERSION}"

APP_DIR=${ROOT}/test/echo

echo "Replaces environment."
sed -i "s|\${MY_PROJECT_ID}|${PROJECT_ID}|g" ${APP_DIR}/swagger.json
sed -i "s|\${VERSION}|${APP_VERSION}|g" ${APP_DIR}/echo.js
sed -i "s|\${IMAGE_NAME}|${IMAGE_NAME}|g" ${APP_DIR}/app_esp.yaml

$ROOT/script/linux-gae-instance -a $ROOT/test/echo/app_esp.yaml \
    -v ${GAE_VERSION} -p ${PROJECT_ID} create \
  || error_exit "Failed to deploy ${GAE_VERSION} to ${PROJECT_ID}."

trap "$ROOT/script/linux-gae-instance -v ${GAE_VERSION} -p ${PROJECT_ID} delete" EXIT

HOST="https://${GAE_VERSION}-dot-${PROJECT_ID}.appspot.com"

echo "Verify \"${APP_VERSION}\" version is deployed on host: ${HOST}".
DEPLOYED_VERSION="$(curl ${HOST}/version)"

echo "Expected version: ${APP_VERSION}"
echo "Deployed version: ${DEPLOYED_VERSION}"

[[ "${DEPLOYED_VERSION}" =~ .*${APP_VERSION}.* ]] \
  || error_exit "DEPLOYED_VERSION: ${DEPLOYED_VERSION} not matched with ${APP_VERSION}"

echo "Verify that endpoints is enabled"
EXPECTED_RESPONSE=".*Method doesn't allow unregistered callers.*STATUS_CODE:401"
[[ "$(curl -w "STATUS_CODE:%{http_code}" ${HOST}/echo)" =~ $EXPECTED_RESPONSE ]] \
  || error_exit "ERROR: Endpoints is disabled on ${HOST}"

SERVICE_NAME="echo-${PROJECT_ID}.cloudendpointsapis.com"
JWT_TOKEN=$($ROOT/client/custom/gen-auth-token.sh -s $ROOT/test/echo/esp-echo-client-secret-jwk.json -a $SERVICE_NAME)
POST_FILE="$ROOT/test/echo/esp-echo-client-secret-x509.json"
sed -e "s|\${API_KEY}|$API_KEY|g" \
    -e "s|\${HOST}|$HOST|g" \
    -e "s|\${POST_FILE}|$POST_FILE|g" \
    -e "s|\${JWT_TOKEN}|$JWT_TOKEN|g" \
    $ROOT/test/client/test_data.json.temp > $ROOT/test/client/test_data.json
cat $ROOT/test/client/test_data.json

echo "Start perf testing"
pushd $ROOT/test/client > /dev/null
./esp_client.py --test_data=$ROOT/test/client/test_data.json ${TEST_ENV}
RESULT=${?}

if [[ -n "${BUCKET}" ]] ; then
  echo "Downloading NGINX server logs."
  ${ROOT}/script/linux-gae-instance \
    -v "${GAE_VERSION}" -p "${PROJECT_ID}" -d "${HOME}/echo-nginx-logs" nginx-logs \
  && gsutil -h "Content-Type:text/plain" -m cp -r "${HOME}/echo-nginx-logs" "${BUCKET}/${GAE_VERSION}" \
  || error_exit "Cannot download NGINX logs."
fi

exit ${RESULT}
