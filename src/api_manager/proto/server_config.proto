// Copyright (C) Endpoints Server Proxy Authors
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.
//
////////////////////////////////////////////////////////////////////////////////
//
syntax = "proto3";

package google.api_manager.proto;

// Top-level server_config message.
message ServerConfig {
  // Server config used by service control client.
  ServiceControlClientConfig service_control_client_config = 1;

  // Server config allowing to override service control server address.
  ServiceControlServerConfig service_control_server_config = 2;

  // Cloud Trace API url
  string cloud_trace_url = 3;

  // other experiment flags
}

// Server config for service control client
message ServiceControlClientConfig {
  // Check aggregator config
  CheckAggregatorConfig check_aggregator_config = 1;

  // Report aggregator config
  ReportAggregatorConfig report_aggregator_config = 2;

  // Timeout in milliseconds on service control check requests.
  // If the value is <= 0, default timeout is 5000 milliseconds.
  int32 check_timeout_ms = 3;

  // Timeout in milliseconds on service control report requests.
  // If the value is <= 0, default timeout is 15000 milliseconds.
  int32 report_timeout_ms = 4;
}

// Check aggregator config
message CheckAggregatorConfig {
  // The maximum number of cache entries that can be kept in the aggregation
  // cache. Cache is disabled when entries <= 0.
  int32 cache_entries = 1;

  // The maximum milliseconds before aggregated check requests are flushed to
  // the server.
  int32 flush_interval_ms = 2;

  // The maximum milliseconds before a cached check response should be deleted.
  int32 response_expiration_ms = 3;
}

// Report aggregator config
message ReportAggregatorConfig {
  // The maximum number of cache entries that can be kept in the aggregation
  // cache. Cache is disabled when entries <= 0.
  int32 cache_entries = 1;

  // The maximum milliseconds before aggregated report requests are flushed to
  // the server. The cache entry is deleted after the flush.
  int32 flush_interval_ms = 2;
}

// Server config which allows customization of service control server.
message ServiceControlServerConfig {
  // An address of the service control server to use (overrides that
  // specificed in service config).
  // Name environment is used for consistency with service config.
  string environment = 1;
}
